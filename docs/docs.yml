---

github_account: archf
requirements: []
synopsis: |

  ### Usergroups

  This role works in a usergroups paradigm. As your coworkers also needs to
  login on the same servers, user accounts are configured by adding one or
  multiple usergroups composed of one or more individual users that will end up
  attached to the unix group named after the usergroup name. Phew!

  ### Workstations

  You will often see around the term `workstations` either in the code or in
  part of variable's name or as an ansible group name. Workstations can be seen
  as the main working machine. For instance a laptop or a desktop used for
  daily work by a single person should be part of this host group.

  So what does it change?

  For hosts in this special host group, the role behavior will change as not
  all `usergroups` nor every user of these usergroups are configured on the
  target. In fact, the sole user that will be added is the one which has a
  matching `workstation: <hostname>` configured in his user profile.

  ### SSH keys management

  Private ssh keys are **only managed on workstations**. Agent-fowarding should be
  considered when using a `jumphost` or hopping through a bastion host. To make
  things manageable and flexible, following logic is used to allow a user to
  have have multiple ssh keys.

    * default keyname id_rsa and id_rsa.pub are not use for complexity reasons
    * default keys give access to an internal domain (i.e. company domain)
    * other keys might optionaly exist and give access to other external domains
    * keynames follow a `<user>.<domain>`

  The `domain` part is important as it hints you what it gives access to. As
  such, this is the role behavior regarding your keyring management.

    * default keys are deployed as <user>.<domain> and <user>.<domain>.pub on workstations
    * public keys will be deployed exclusively on target where ansible_fqdn == <user>.<domain>
    * ssh keys can be rotated, this behavior is disabled by default
    * keypairs are created on workstations at user account creations
    * all public keys of configured keypairs are fetched back to usergroup keyring
    * private keys are never fetched to the usergroup keyring
    * other keys can be requested to be generated at user account creation
    * every public key is deployed in an exclusive fashion
    * other keys are not deployed in the internal domain (keys are exclusive)
    * to make use of other keys, the user must configure his `ssh_config` properly

  ### Usage

  **Usergroup directory scaffolding**

  To add users, you need to configure usergroups inside `group_vars` or `host_vars`.

  ```yaml
    usergroups:
      - name: vendorgroup
        gid: 1001
        # gid is optional
      - name: customergroup
  ```

  You can also tweak the behavior on a per group or per machine basis.

  Then at the path defined by `groups_dir: "{{ playbook_dir }}/private/groups"`
  variable, create a folder by the `usergroup name` with content such as

  ```bash
  $ > tree
  .
  └── vendorgroup
      ├── foo_ssh_config.yml
      ├── keys
      └── users.yml
  ```

  for each of the groups you declared in `usergroups`. Play will fail if
  directory and/or files are missing for a given `usergroup`.

  **Usergroup members configuration**

  In each group you will have a file where you define and configure the unix
  group members. See the Role Variables` section for more information on ways
  to personalise a user account. Most settings in `users_defaults` can be
  overridden.

  ```shell
  $ > cat vendorgroup/users.yml                                                                                                                                             1 gh-pages-!?
  ---

  users:

    - name: foo
      groups:
        - adm
        - lp
        - users
      comments: 'foo account'
      shell: "/bin/zsh"
      ssh_domains:
        - company.domain

      dotfiles_dir: dotfiles
      omyzsh_dir: .oh-my-zsh
      vim_dir: .vim

      dotfiles_symlinks:
        - vimrc
        - bashrc
        - zshrc
        - gitconfig
        - git_template
        - profile
        - zprofile
        - tmux.conf
        - ansible.cfg
        - ctags
        - pypirc

    - name: bar
      ssh_domains:
        - lan
        - example.com
      comments: 'bar user'

    - name: baz
      groups:
        - users
      ssh_domains:
        - lan
        - example.org
      comments: 'baz user'
  ```

  **User ssh_configuration**

  Each user can optionaly manage their `ssh_config` with ansible. For example
  for the *foo* user above, the statements below will be transmuted into a
  `~/.ssh/config` Parameters from `users_defaults['ssh_config']` are also
  considered. This file is *totaly optional*. The playbook will not fail if it
  is missing for a given user.

  ```bash
  $ > cat vendorgroup/foo_ssh_config.yml
  ---

  ssh_config:
    - Host: bitbucket.org
      User: git
      ForwardX11: no
      PreferredAuthentications: publickey
      ControlMaster: no

    - Host: github.com
      User: git
      ForwardX11: no
      PreferredAuthentications: publickey
      ControlMaster: no

    - Host: "*lb-*"
      User: archambf
      Hostname: "%h.lb.labfqdn"
      ForwardAgent: yes
      StrictHostKeyChecking: yes
      ProxyCommand: ssh -W %h:%p jumphost
  ```

  As you might notice,

  * Every key must be a valid `ssh_config` option.
  * `Match` statements are supported.
  * Quote strings with special chars else yaml parsing will fail

todos:
  - manage sudoers
  - generate random passwords using passlib and mail'em to user
